# Question url:
# https://leetcode.com/problems/binary-tree-tilt/description/


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution_iterative:
    def findTilt(self, root):
        stack = [(1, root)]
        tilt, d = 0, {}
        while stack:
            indicator, node = stack.pop()
            if node is None:
                continue
            if indicator:
                # just doing post-order traversal here
                stack.extend([(0, node), (1, node.right), (1, node.left)])
                # record the node's children as we traverse the tree
                d[node.left], d[node.right] = 0, 0
            else:
                tilt += abs(d[node.left] - d[node.right])
                d[node] = node.val + d[node.left] + d[node.right]
        return tilt


# Using tuple here, the first element in the tuple is the
# sum up to this node, the second element is the tilt up to
# this node
class Solution_recursive:
    def findTilt(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def tilt(root):
            if root is None:
                return (0, 0)

            left = tilt(root.left)
            right = tilt(root.right)
            return (root.val + left[0] + right[0],
                    abs(left[0] - right[0]) + left[1] + right[1])

        return tilt(root)[1]

class Solution_iterative_DFS:
    def sumOfLeftLeaves(self, root):
        stack = [root]
        total = 0
        while stack:
            node = stack.pop()
            if node:
                if node.left and not node.left.left and not node.left.right:
                    total += node.left.val
                stack.extend([node.left, node.right])
        return total


class Solution_recursive:
    def sumOfLeftLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root is None:
            return 0

        left = self.sumOfLeftLeaves(root.left)
        right = self.sumOfLeftLeaves(root.right)

        if root.left and root.left.left is None and root.left.right is None:
            return root.left.val + right

        return left + right

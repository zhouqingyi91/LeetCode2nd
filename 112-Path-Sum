class Solution_iterative:
    def hasPathSum(self, root, target):
        stack = [(root, 0)]
        while stack:
            node, path = stack.pop()
            if node:
                if node.left is None and node.right is None and path + node.val == target:
                    return True
                stack.extend([(node.left, path + node.val), (node.right, path + node.val)])
        return False


class Solution_recursive:
    def hasPathSum(self, root, target):
        if root is None:
            return False
        if not root.left and not root.right and target == root.val:
            return True
        return self.hasPathSum(root.left, target - root.val) or \
            self.hasPathSum(root.right, target - root.val)


class Solution_recursive_with_helper:
    def hasPathSum(self, root, target):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        return self.helper(root, target, 0)

    def helper(self, root, target, path):
        if root is None:
            return False
        if not root.left and not root.right and target == path + root.val:
            return True
        return self.helper(root.left, target, path + root.val) or \
            self.helper(root.right, target, path + root.val)

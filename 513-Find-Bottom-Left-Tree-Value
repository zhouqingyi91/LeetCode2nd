class Solution_iterative:
    def findBottomLeftValue(self, root):
        row = [root]
        while any(row):
            ans = [node.val for node in row]
            row = [kid for node in row for kid in (node.right, node.left) if kid]
        return ans.pop()


class Solution_recursive:
    def findBottomLeftValue(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def dfs(root, d):
            if root is None:
                return (0, None)
            if not root.left and not root.right:
                return (d, root.val)

            left = dfs(root.left, d + 1)
            right = dfs(root.right, d + 1)

            return left if left[0] >= right[0] else right

        return dfs(root, 0)[1]

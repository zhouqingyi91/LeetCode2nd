class Solution_iterative:
    def diameterOfBinaryTree(self, root):
        stack = [(1, root)]
        d = {None: -1}
        diameter = 0
        while stack:
            indicator, node = stack.pop()
            if node is None:
                continue
            if indicator:
                # doing post-order traversal here
                stack.extend([(0, node), (1, node.right), (1, node.left)])
            else:
                left = d[node.left] + 1
                right = d[node.right] + 1
                d[node] = max(left, right)
                # build the hashtable from bottom up
                # the key is the node, the value is the node's max depth
                diameter = max(diameter, left + right)
        return diameter


class Solution_recursive:
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def depth(root):
            if root is None:
                return 0
            left = depth(root.left)
            right = depth(root.right)
            self.diameter = max(self.diameter, left + right)
            return max(left, right) + 1
        self.diameter = 0
        depth(root)
        return self.diameter
